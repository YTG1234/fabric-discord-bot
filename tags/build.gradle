buildscript {
    repositories {
        google()
        mavenCentral()
    }
}

plugins {
    id "application"

    id "io.gitlab.arturbosch.detekt"
    id "com.github.johnrengelman.shadow"
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.plugin.serialization"
}

group "net.fabricmc.bot.tags"
targetCompatibility = 1.11
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    // jcenter() is dead

    maven {
        name = "Kord"
        url = "https://dl.bintray.com/kordlib/Kord"
    }

    maven {
        name = "KotDis"
        url = "https://maven.kotlindiscord.com/repository/maven-snapshots/"
    }

    maven {
        name = "Eclipse"
        url = "https://repo.eclipse.org/content/groups/releases/"
    }
}

dependencies {
    // Linter
    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.13.1")

    // Kotlin deps
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")

    // Kord Extensions framework (for Discord objects)
    implementation("com.kotlindiscord.kord.extensions:kord-extensions:1.2-SNAPSHOT")

    // Logging deps
    implementation("ch.qos.logback:logback-classic:1.2.3")
    implementation("io.github.microutils:kotlin-logging:2.0.3")
    implementation("org.codehaus.groovy:groovy:3.0.4")  // For logback config

    // Tags
    api("com.charleskorn.kaml:kaml:0.23.0")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:1.0.0-RC")
}

application {
    mainClass.set("net.fabricmc.bot.tags.AppKt")
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    kotlinOptions.useIR = true
    kotlinOptions.freeCompilerArgs = [
            "-XXLanguage:+NewInference",
            "-Xopt-in=kotlin.RequiresOptIn"
    ]
}

detekt {
    buildUponDefaultConfig = true
    config = files("../detekt.yml")
}

jar {
    manifest {
        attributes(
                "Main-Class": "net.fabricmc.bot.tags.AppKt"
        )
    }
}

processResources {
    dependsOn("generateBuildInfo")

    from("src/main/resources/build.properties")
}

task generateBuildInfo() {
    outputs.files("src/main/resources/build.properties")

    doLast {
        new File("src/main/resources/build.properties").text = """
            version=$project.version
        """.stripIndent().strip()
    }
}
