plugins {
    id "application"

    id "com.github.jakemarsden.git-hooks" version "0.0.1"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "io.gitlab.arturbosch.detekt" version "1.13.1"
    id "org.jetbrains.kotlin.jvm" version "1.4.30"
    id "com.squareup.sqldelight" version "1.4.3"
    id "org.jetbrains.kotlin.plugin.serialization" version "1.4.30"
}

group = "net.fabricmc.bot"
targetCompatibility = 1.11
version = "1.0-SNAPSHOT"

allprojects {
	buildscript {
    	repositories {
    	    google()
        	mavenCentral()
    	}
	}

	apply plugin: "application"
	apply plugin: "org.jetbrains.kotlin.jvm"
	apply plugin: "com.github.johnrengelman.shadow"
	apply plugin: "io.gitlab.arturbosch.detekt"
	apply plugin: "org.jetbrains.kotlin.plugin.serialization"

	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()

		maven {
        	name = "Kord"
        	url = "https://dl.bintray.com/kordlib/Kord"
    	}

    	maven {
    	    name = "KotDis"
     	   	url = "https://maven.kotlindiscord.com/repository/maven-releases/"
    	}

    	maven {
    	    name = "Eclipse"
    	    url = "https://repo.eclipse.org/content/groups/releases/"
    	}
	}

	dependencies {
		// Linter
		detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.13.1")

		// Kotlin
		implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
		implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
		implementation("org.jetbrains.kotlin:kotlin-reflect")

		// KordExt
		implementation("com.kotlindiscord.kord.extensions:kord-extensions:1.4.0-RC6")

		// Logging
		implementation("ch.qos.logback:logback-classic:1.2.3")
		implementation("io.github.microutils:kotlin-logging:2.0.3")
		implementation("org.codehaus.groovy:groovy:3.0.4") // for logback config
	}

	compileKotlin {
    	kotlinOptions.jvmTarget = "11"
   		kotlinOptions.useIR = true
    	kotlinOptions.freeCompilerArgs = [
            // "-XXLanguage:+NewInference",
            "-Xopt-in=kotlin.RequiresOptIn"
    	]
	}

	detekt {
		buildUponDefaultConfig = true
	}

	processResources {
    	dependsOn("generateBuildInfo")

    	from("src/main/resources/build.properties")
	}

	task generateBuildInfo() {
    	outputs.files("src/main/resources/build.properties")

    	doLast {
    	    new File("src/main/resources/build.properties").text = """
     	       version=${this.version}
    	    """.stripIndent().strip()
    	}
	}
}

repositories {
    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }

    maven {
        name = "JitPack"
        url = "https://jitpack.io/"
    }
}

dependencies {
    // Config framework
    implementation("com.uchuhimo:konf:0.23.0")
    implementation("com.uchuhimo:konf-toml:0.23.0")

    // Guava
    implementation("com.google.guava:guava:29.0-jre")

    // Database: https://cashapp.github.io/sqldelight/jvm_mysql/
    implementation("com.squareup.sqldelight:coroutines-extensions-jvm:1.4.3")
    implementation("com.squareup.sqldelight:jdbc-driver:1.4.3")
    implementation("com.zaxxer:HikariCP:3.4.5")
    implementation("org.mariadb.jdbc:mariadb-java-client:2.6.+")

    // Tags
    implementation("org.eclipse.jgit:org.eclipse.jgit:5.9.0.202009080501-r")
    implementation(project(":tags"))

    // URL Filtering
    implementation("org.nibor.autolink:autolink:0.10.0")

    // Mappings
    implementation("net.fabricmc:tiny-mappings-parser:+")

    // HTTP (Already used by kord)
    implementation("io.ktor:ktor-http:1.4.0")
    implementation("io.ktor:ktor-client-cio:1.4.0")

    // Memoization
    implementation("com.github.aballano:mnemonik:2.0.1")

	// Errors
	implementation("com.github.YTG1234:kordext-backgroundcat-base:819c24")
	implementation("com.github.YTG1234:kordext-backgroundcat-defaults:043ac8") {
		exclude(module: "kordext-backgroundcat-base")
	}
}

application {
    mainClassName = "net.fabricmc.bot.AppKt"
}

detekt {
    config = files("detekt.yml")
}

gitHooks {
    hooks = ["pre-commit": "detekt"]
}

sqldelight {
    FabricBotDB {
        deriveSchemaFromMigrations = true
        dialect = "mysql"
        migrationOutputDirectory = file("$buildDir/resources/main/migrations")
        packageName = "net.fabricmc.bot.database"
        schemaOutputDirectory = file("src/main/sqldelight/databases")
        sourceFolders = ["sqldelight"]
    }
}

jar {
    manifest {
        attributes(
                "Main-Class": "net.fabricmc.bot.AppKt"
        )
    }
}

compileKotlin.configure {
    dependsOn("generateMainFabricBotDBMigrations")
}

tasks.withType(Wrapper).configureEach {
	it.gradleVersion = "6.8.2"
	it.distributionType = Wrapper.DistributionType.ALL
}
